[{"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(auth)\\(signin)\\page.tsx":"1","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\employee\\page.tsx":"2","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\employee\\[employeeId]\\page.tsx":"3","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\facturen\\page.tsx":"4","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\kanban\\page.tsx":"5","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\layout.tsx":"6","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\page.tsx":"7","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\profile\\page.tsx":"8","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\user\\page.tsx":"9","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\user\\[userId]\\page.tsx":"10","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\actions\\getCurrentUser.ts":"11","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\actions\\getInvoiceById.ts":"12","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\actions\\getInvoices.ts":"13","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\api\\uploadthing\\core.ts":"14","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\api\\uploadthing\\route.ts":"15","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\layout.tsx":"16","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\not-found.tsx":"17","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\pages\\api\\auth\\[...nextauth].ts":"18","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\breadcrumb.tsx":"19","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\dashboard-nav.tsx":"20","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\date-range-picker.tsx":"21","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceActionButtons.tsx":"22","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceCard.tsx":"23","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceHead.tsx":"24","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceInfo.tsx":"25","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceInfoItemList.tsx":"26","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\StatusBadge.tsx":"27","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\file-upload.tsx":"28","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\employee-form.tsx":"29","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\product-form.tsx":"30","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\user-auth-form.tsx":"31","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\user-profile-stepper\\create-profile.tsx":"32","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\github-auth-button.tsx":"33","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\icons.tsx":"34","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\Check.tsx":"35","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\CountrySelect.tsx":"36","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\DatePicker.tsx":"37","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\Input.tsx":"38","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\Select.tsx":"39","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\board-column.tsx":"40","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\column-action.tsx":"41","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\kanban-board.tsx":"42","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\new-section-dialog.tsx":"43","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\new-task-dialog.tsx":"44","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\task-card.tsx":"45","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\header.tsx":"46","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\mobile-sidebar.tsx":"47","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\providers.tsx":"48","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\sidebar.tsx":"49","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\ThemeToggle\\theme-provider.tsx":"50","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\ThemeToggle\\theme-toggle.tsx":"51","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\user-nav.tsx":"52","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\modal\\alert-modal.tsx":"53","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\overview.tsx":"54","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\recent-sales.tsx":"55","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Button.tsx":"56","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Container.tsx":"57","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\EmptyState.tsx":"58","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Filter.tsx":"59","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\HeaderControls.tsx":"60","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Loader.tsx":"61","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\employee-tables\\cell-action.tsx":"62","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\employee-tables\\columns.tsx":"63","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\employee-tables\\employee-table.tsx":"64","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\user-tables\\cell-action.tsx":"65","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\user-tables\\client.tsx":"66","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\user-tables\\columns.tsx":"67","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\accordion.tsx":"68","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\alert-dialog.tsx":"69","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\alert.tsx":"70","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\avatar.tsx":"71","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\badge.tsx":"72","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\button.tsx":"73","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\calendar.tsx":"74","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\card.tsx":"75","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\checkbox.tsx":"76","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\data-table.tsx":"77","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\dialog.tsx":"78","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\dropdown-menu.tsx":"79","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\form.tsx":"80","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\heading.tsx":"81","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\input.tsx":"82","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\label.tsx":"83","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\modal.tsx":"84","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\popover.tsx":"85","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\scroll-area.tsx":"86","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\select.tsx":"87","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\separator.tsx":"88","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\sheet.tsx":"89","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\skeleton.tsx":"90","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\slider.tsx":"91","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\switch.tsx":"92","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\table.tsx":"93","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\tabs.tsx":"94","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\textarea.tsx":"95","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\toast.tsx":"96","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\toaster.tsx":"97","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\use-toast.ts":"98","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\auth-options.ts":"99","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\form-schema.ts":"100","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\store.ts":"101","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\utils.ts":"102"},{"size":3084,"mtime":1712910303148,"results":"103","hashOfConfig":"104"},{"size":2213,"mtime":1712910303172,"results":"105","hashOfConfig":"104"},{"size":659,"mtime":1712910303161,"results":"106","hashOfConfig":"104"},{"size":3159,"mtime":1712974720499,"results":"107","hashOfConfig":"104"},{"size":707,"mtime":1712910303197,"results":"108","hashOfConfig":"104"},{"size":590,"mtime":1712910303208,"results":"109","hashOfConfig":"104"},{"size":6771,"mtime":1712910303221,"results":"110","hashOfConfig":"104"},{"size":577,"mtime":1712910303233,"results":"111","hashOfConfig":"104"},{"size":467,"mtime":1712910303257,"results":"112","hashOfConfig":"104"},{"size":784,"mtime":1712910303247,"results":"113","hashOfConfig":"104"},{"size":885,"mtime":1712910303268,"results":"114","hashOfConfig":"104"},{"size":897,"mtime":1712910303279,"results":"115","hashOfConfig":"104"},{"size":1330,"mtime":1712910303289,"results":"116","hashOfConfig":"104"},{"size":1009,"mtime":1712910303314,"results":"117","hashOfConfig":"104"},{"size":229,"mtime":1712910303323,"results":"118","hashOfConfig":"104"},{"size":889,"mtime":1712910303370,"results":"119","hashOfConfig":"104"},{"size":1102,"mtime":1712910303383,"results":"120","hashOfConfig":"104"},{"size":1849,"mtime":1693477228000,"results":"121","hashOfConfig":"104"},{"size":1145,"mtime":1712910303417,"results":"122","hashOfConfig":"104"},{"size":1487,"mtime":1712910303428,"results":"123","hashOfConfig":"104"},{"size":1862,"mtime":1712910303438,"results":"124","hashOfConfig":"104"},{"size":1654,"mtime":1712910303450,"results":"125","hashOfConfig":"104"},{"size":1843,"mtime":1712910303461,"results":"126","hashOfConfig":"104"},{"size":666,"mtime":1712910303472,"results":"127","hashOfConfig":"104"},{"size":3772,"mtime":1712910303484,"results":"128","hashOfConfig":"104"},{"size":1614,"mtime":1712910303495,"results":"129","hashOfConfig":"104"},{"size":1017,"mtime":1712910303504,"results":"130","hashOfConfig":"104"},{"size":3202,"mtime":1712910303524,"results":"131","hashOfConfig":"104"},{"size":8189,"mtime":1712910303537,"results":"132","hashOfConfig":"104"},{"size":8372,"mtime":1712910303550,"results":"133","hashOfConfig":"104"},{"size":2569,"mtime":1712910303561,"results":"134","hashOfConfig":"104"},{"size":24185,"mtime":1712910303573,"results":"135","hashOfConfig":"104"},{"size":644,"mtime":1712910303583,"results":"136","hashOfConfig":"104"},{"size":2764,"mtime":1712910303594,"results":"137","hashOfConfig":"104"},{"size":1957,"mtime":1712910303606,"results":"138","hashOfConfig":"104"},{"size":2222,"mtime":1712910303617,"results":"139","hashOfConfig":"104"},{"size":1786,"mtime":1712910303625,"results":"140","hashOfConfig":"104"},{"size":2760,"mtime":1712910303636,"results":"141","hashOfConfig":"104"},{"size":2123,"mtime":1712910303647,"results":"142","hashOfConfig":"104"},{"size":3615,"mtime":1712910303659,"results":"143","hashOfConfig":"104"},{"size":3974,"mtime":1712910303671,"results":"144","hashOfConfig":"104"},{"size":10343,"mtime":1712910303682,"results":"145","hashOfConfig":"104"},{"size":1866,"mtime":1712910303692,"results":"146","hashOfConfig":"104"},{"size":2212,"mtime":1712910303702,"results":"147","hashOfConfig":"104"},{"size":2161,"mtime":1712910303713,"results":"148","hashOfConfig":"104"},{"size":1397,"mtime":1712910303744,"results":"149","hashOfConfig":"104"},{"size":1186,"mtime":1712910303755,"results":"150","hashOfConfig":"104"},{"size":536,"mtime":1712910303765,"results":"151","hashOfConfig":"104"},{"size":640,"mtime":1712910303774,"results":"152","hashOfConfig":"104"},{"size":323,"mtime":1712910303723,"results":"153","hashOfConfig":"104"},{"size":1314,"mtime":1712910303735,"results":"154","hashOfConfig":"104"},{"size":2402,"mtime":1712910303789,"results":"155","hashOfConfig":"104"},{"size":1064,"mtime":1712910303802,"results":"156","hashOfConfig":"104"},{"size":1704,"mtime":1712910303814,"results":"157","hashOfConfig":"104"},{"size":2781,"mtime":1712910303829,"results":"158","hashOfConfig":"104"},{"size":1679,"mtime":1712910303840,"results":"159","hashOfConfig":"104"},{"size":365,"mtime":1712910303851,"results":"160","hashOfConfig":"104"},{"size":1208,"mtime":1712910303861,"results":"161","hashOfConfig":"104"},{"size":1375,"mtime":1712910303872,"results":"162","hashOfConfig":"104"},{"size":1877,"mtime":1712910303884,"results":"163","hashOfConfig":"104"},{"size":274,"mtime":1712910303896,"results":"164","hashOfConfig":"104"},{"size":1763,"mtime":1712910303905,"results":"165","hashOfConfig":"104"},{"size":1179,"mtime":1712910303916,"results":"166","hashOfConfig":"104"},{"size":10509,"mtime":1712910303926,"results":"167","hashOfConfig":"104"},{"size":1744,"mtime":1712910303944,"results":"168","hashOfConfig":"104"},{"size":1111,"mtime":1712910303954,"results":"169","hashOfConfig":"104"},{"size":1103,"mtime":1712910303965,"results":"170","hashOfConfig":"104"},{"size":2093,"mtime":1712910303977,"results":"171","hashOfConfig":"104"},{"size":4765,"mtime":1712910303999,"results":"172","hashOfConfig":"104"},{"size":1669,"mtime":1712910304012,"results":"173","hashOfConfig":"104"},{"size":1482,"mtime":1712910304040,"results":"174","hashOfConfig":"104"},{"size":1183,"mtime":1712910304096,"results":"175","hashOfConfig":"104"},{"size":1889,"mtime":1712910304114,"results":"176","hashOfConfig":"104"},{"size":2760,"mtime":1712910304125,"results":"177","hashOfConfig":"104"},{"size":1959,"mtime":1712910304171,"results":"178","hashOfConfig":"104"},{"size":1082,"mtime":1712910304185,"results":"179","hashOfConfig":"104"},{"size":3891,"mtime":1712910304203,"results":"180","hashOfConfig":"104"},{"size":4056,"mtime":1712910304241,"results":"181","hashOfConfig":"104"},{"size":7612,"mtime":1712910304268,"results":"182","hashOfConfig":"104"},{"size":4375,"mtime":1712910304290,"results":"183","hashOfConfig":"104"},{"size":336,"mtime":1712910304309,"results":"184","hashOfConfig":"104"},{"size":834,"mtime":1712910304325,"results":"185","hashOfConfig":"104"},{"size":760,"mtime":1712910304348,"results":"186","hashOfConfig":"104"},{"size":827,"mtime":1712910304358,"results":"187","hashOfConfig":"104"},{"size":1285,"mtime":1712910304384,"results":"188","hashOfConfig":"104"},{"size":1698,"mtime":1712910304404,"results":"189","hashOfConfig":"104"},{"size":4518,"mtime":1712910304421,"results":"190","hashOfConfig":"104"},{"size":811,"mtime":1712910304438,"results":"191","hashOfConfig":"104"},{"size":4496,"mtime":1712910304453,"results":"192","hashOfConfig":"104"},{"size":284,"mtime":1712910304467,"results":"193","hashOfConfig":"104"},{"size":1087,"mtime":1712910304485,"results":"194","hashOfConfig":"104"},{"size":1210,"mtime":1712910304503,"results":"195","hashOfConfig":"104"},{"size":2962,"mtime":1712910304523,"results":"196","hashOfConfig":"104"},{"size":1961,"mtime":1712910304537,"results":"197","hashOfConfig":"104"},{"size":764,"mtime":1712910304552,"results":"198","hashOfConfig":"104"},{"size":4999,"mtime":1712910304565,"results":"199","hashOfConfig":"104"},{"size":835,"mtime":1712910304580,"results":"200","hashOfConfig":"104"},{"size":4174,"mtime":1712910304598,"results":"201","hashOfConfig":"104"},{"size":1186,"mtime":1712910304673,"results":"202","hashOfConfig":"104"},{"size":1442,"mtime":1712910304687,"results":"203","hashOfConfig":"104"},{"size":2364,"mtime":1712910304714,"results":"204","hashOfConfig":"104"},{"size":753,"mtime":1712910304730,"results":"205","hashOfConfig":"104"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n5byr8",{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320"},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324"},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331"},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338"},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","suppressedMessages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","suppressedMessages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","suppressedMessages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","suppressedMessages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","suppressedMessages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","suppressedMessages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","suppressedMessages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","suppressedMessages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","suppressedMessages":"384","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","suppressedMessages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","suppressedMessages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","suppressedMessages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","suppressedMessages":"400","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401"},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405"},{"filePath":"406","messages":"407","suppressedMessages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","suppressedMessages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","suppressedMessages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","suppressedMessages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","suppressedMessages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","suppressedMessages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","suppressedMessages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","suppressedMessages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","suppressedMessages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","suppressedMessages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","suppressedMessages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","suppressedMessages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","suppressedMessages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","suppressedMessages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","suppressedMessages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","suppressedMessages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","suppressedMessages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","suppressedMessages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","suppressedMessages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","suppressedMessages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","suppressedMessages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","suppressedMessages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","suppressedMessages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"500","messages":"501","suppressedMessages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","suppressedMessages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"506","messages":"507","suppressedMessages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","suppressedMessages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"512","messages":"513","suppressedMessages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","suppressedMessages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","suppressedMessages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","suppressedMessages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"524","messages":"525","suppressedMessages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(auth)\\(signin)\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\employee\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\employee\\[employeeId]\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\facturen\\page.tsx",["527"],[],"export const dynamic = \"force-dynamic\";\r\n\r\n\r\nimport BreadCrumb from \"@/components/breadcrumb\";\r\nimport getCurrentUser from \"../../../../app/actions/getCurrentUser\"; \r\nimport getInvoices, { IInvoicesParams } from \"../../../../app/actions/getInvoices\";\r\n\r\nimport InvoiceCard from \"../.././../../components/facturen/InvoiceCard\";\r\nimport EmptyState from \"../../../../components/shared/EmptyState\"\r\nimport HeaderControls from \"../../../../components/shared/HeaderControls\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\n\r\n\r\n\r\n\r\nconst breadcrumbItems = [{ title: \"Facturen\", link: \"/dashboard/facturen\" }];\r\n\r\ninterface HomeProps{\r\n  searchParams: IInvoicesParams;\r\n}\r\n\r\n\r\n\r\nconst Home: React.FC<HomeProps> = async (props) => { \r\n  const condition = true; // Define your condition here\r\n  const { searchParams } = props; \r\n  const invoices = await getInvoices(searchParams);\r\n  const currentUser = await getCurrentUser();\r\n\r\n  if (invoices.length === 0) {\r\n    return (\r\n      <ScrollArea className=\"h-full\">\r\n        <div className=\"flex-1 space-y-4 p-4 md:p-8 pt-6\">\r\n          <BreadCrumb items={breadcrumbItems} />\r\n          <>\r\n      <HeaderControls\r\n        currentUser={currentUser}\r\n        numOfInvoices={invoices.length}\r\n      />\r\n      <EmptyState\r\n        title=\"There is nothing here\"\r\n        subtitle=\"Create a new invoice by clicking the New Invoice button and get started\"\r\n      />\r\n    </>\r\n        </div>\r\n      </ScrollArea>\r\n    );\r\n  } else {\r\n    return (\r\n      <ScrollArea className=\"h-full\">\r\n        <div className=\"flex-1 space-y-4 p-4 md:p-8 pt-6\">\r\n          <BreadCrumb items={breadcrumbItems} />\r\n          <>\r\n      <HeaderControls\r\n        currentUser={currentUser}\r\n        numOfInvoices={invoices.length}\r\n      />\r\n      <div className=\"flex flex-col gap-3 overflow-y-auto\">\r\n        {invoices.map((invoice, index) => (\r\n          <InvoiceCard key={index} invoice={invoice} />\r\n        ))}\r\n      </div>\r\n    </>\r\n        </div>\r\n      </ScrollArea>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n//{invoices.map((invoice, index) => (\r\n// <InvoiceCard key={index} invoice={invoice} />\r\n//))}\r\n\r\n//export default function page() {\r\n // return (\r\n //   <ScrollArea className=\"h-full\">\r\n //     <div className=\"flex-1 space-y-4 p-4 md:p-8 pt-6\">\r\n //       <BreadCrumb items={breadcrumbItems} />\r\n //       option a\r\n\r\n\r\n  //      option b\r\n   //   </div>\r\n   // </ScrollArea>\r\n // );\r\n//}\r\n//if (invoices.length === 0) {\r\n // var a = \r\n //   <>\r\n  //    <HeaderControls\r\n  //      currentUser={currentUser}\r\n  //      numOfInvoices={invoices.length}\r\n  //    />\r\n  //    <EmptyState\r\n  //      title=\"There is nothing here\"\r\n  //      subtitle=\"Create a new invoice by clicking the New Invoice button and get started\"\r\n  //    />\r\n  //  </>\r\n // )};\r\n\r\n // var b =\r\n  //(\r\n  //  <>\r\n  //    <HeaderControls\r\n  //      currentUser={currentUser}\r\n   //     numOfInvoices={invoices.length}\r\n   //   />\r\n   //   <div className=\"flex flex-col gap-3 overflow-y-auto\">\r\n   //     {invoices.map((invoice, index) => (\r\n   //       <InvoiceCard key={index} invoice={invoice} />\r\n  //      ))}\r\n  //    </div>\r\n //   </>\r\n // )","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\kanban\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\layout.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\profile\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\user\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\(dashboard)\\dashboard\\user\\[userId]\\page.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\actions\\getCurrentUser.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\actions\\getInvoiceById.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\actions\\getInvoices.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\api\\uploadthing\\core.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\api\\uploadthing\\route.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\layout.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\app\\not-found.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\pages\\api\\auth\\[...nextauth].ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\breadcrumb.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\dashboard-nav.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\date-range-picker.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceActionButtons.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceCard.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceHead.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceInfo.tsx",["528"],[],"\"use client\";\r\n\r\nimport { add, format } from \"date-fns\";\r\n\r\nimport { SafeInvoice } from \"@/types\";\r\nimport useCountries from \"@/hooks/useCountries\";\r\nimport { TERMS } from \"@/enums\";\r\nimport { Item } from \"@prisma/client\";\r\nimport getShortId from \"@/helpers/getShortId\";\r\n\r\nimport InvoiceInfoItemList from \"./InvoiceInfoItemList\";\r\n\r\ninterface InvoiceInfoProps {\r\n  invoice: SafeInvoice & { items: Item[] };\r\n}\r\n\r\nconst InvoiceInfo: React.FC<InvoiceInfoProps> = ({ invoice }) => {\r\n  const { getByValue } = useCountries();\r\n\r\n  const invoiceDate = new Date(invoice.invoiceDate);\r\n\r\n  const dueDate = add(invoiceDate, {\r\n    days: TERMS[invoice.paymentTerm],\r\n  });\r\n\r\n  return (\r\n    <div className=\"overflow-y-auto rounded-md\">\r\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4 sm:gap-2 px-8 py-5 bg-[#FFFFFF] dark:bg-[#1E2139] rounded-md text-[#7E88C3] dark:text-[#DFE3FA] font-medium\">\r\n        {/* Id + description */}\r\n        <div className=\"flex flex-col gap-2\">\r\n          <div className=\"text-base font-bold uppercase text-primary\">\r\n            <span className=\"text-[#7E88C3]\">#</span>\r\n            {getShortId(invoice.id)}\r\n          </div>\r\n          <span className=\"text-sm\">{invoice.description}</span>\r\n        </div>\r\n        {/* Bill From */}\r\n        <div className=\"flex flex-col col-start-1 gap-1 sm:text-right sm:col-start-3\">\r\n          <span>{invoice.streetFrom}</span>\r\n          <span>{invoice.cityFrom}</span>\r\n          <span className=\"uppercase\">{invoice.postCodeFrom}</span>\r\n          <span>{getByValue(invoice.countryFrom)?.label}</span>\r\n        </div>\r\n        {/* Invoice Date + Payment Date */}\r\n        <div className=\"flex flex-col col-start-1 gap-8 sm:col-start-auto\">\r\n          <div className=\"flex flex-col gap-3\">\r\n            <span>Invoice Date</span>\r\n            <span className=\"text-base font-bold text-primary\">\r\n              {format(invoiceDate, \"dd MMM yyyy\")}\r\n            </span>\r\n          </div>\r\n          <div className=\"flex flex-col gap-3\">\r\n            <span>Payment Due</span>\r\n            <span className=\"text-base font-bold text-primary\">\r\n              {format(dueDate, \"dd MMM yyyy\")}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        {/* Bill To */}\r\n        <div className=\"flex flex-col gap-2 justify-self-end sm:justify-self-start\">\r\n          <div className=\"flex flex-col gap-3\">\r\n            <span>Bill To</span>\r\n            <span className=\"text-base font-bold text-primary\">\r\n              {invoice.clientName}\r\n            </span>\r\n          </div>\r\n          <div className=\"flex flex-col col-start-3 gap-1\">\r\n            <span>{invoice.streetFrom}</span>\r\n            <span>{invoice.cityFrom}</span>\r\n            <span className=\"uppercase\">{invoice.postCodeFrom}</span>\r\n            <span>{getByValue(invoice.countryFrom)?.label}</span>\r\n          </div>\r\n        </div>\r\n        {/* Client's email */}\r\n        <div className=\"flex flex-col col-start-1 gap-2 sm:col-start-auto\">\r\n          <div className=\"flex flex-col gap-3\">\r\n            <span>Sent To</span>\r\n            <span className=\"text-base font-bold text-primary\">\r\n              {invoice.clientEmail}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        {/* Items Container */}\r\n        <div className=\"w-full col-span-3 mt-8 overflow-hidden rounded-md\">\r\n          {/* Item List */}\r\n          <InvoiceInfoItemList items={invoice.items} />\r\n          {/* Total */}\r\n          <div className=\"p-8 bg-[#373B53] dark:bg-[#0C0E16] flex justify-between items-center text-white\">\r\n            <span>Amount Due</span>\r\n            <span className=\"text-2xl font-bold\">$ {invoice.total}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvoiceInfo;\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\InvoiceInfoItemList.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\facturen\\StatusBadge.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\file-upload.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\employee-form.tsx",["529","530","531","532"],[],"\"use client\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Heading } from \"@/components/ui/heading\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Trash } from \"lucide-react\";\r\nimport { useParams, useRouter } from \"next/navigation\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport FileUpload from \"../file-upload\";\r\nimport { useToast } from \"../ui/use-toast\";\r\nconst ImgSchema = z.object({\r\n  fileName: z.string(),\r\n  name: z.string(),\r\n  fileSize: z.number(),\r\n  size: z.number(),\r\n  fileKey: z.string(),\r\n  key: z.string(),\r\n  fileUrl: z.string(),\r\n  url: z.string(),\r\n});\r\nexport const IMG_MAX_LIMIT = 3;\r\nconst formSchema = z.object({\r\n  name: z\r\n    .string()\r\n    .min(3, { message: \"Product Name must be at least 3 characters\" }),\r\n  imgUrl: z\r\n    .array(ImgSchema)\r\n    .max(IMG_MAX_LIMIT, { message: \"You can only add up to 3 images\" })\r\n    .min(1, { message: \"At least one image must be added.\" }),\r\n  description: z\r\n    .string()\r\n    .min(3, { message: \"Product description must be at least 3 characters\" }),\r\n  price: z.coerce.number(),\r\n  category: z.string().min(1, { message: \"Please select a category\" }),\r\n});\r\n\r\ntype ProductFormValues = z.infer<typeof formSchema>;\r\n\r\ninterface ProductFormProps {\r\n  initialData: any | null;\r\n  categories: any;\r\n}\r\n\r\nexport const EmployeeForm: React.FC<ProductFormProps> = ({\r\n  initialData,\r\n  categories,\r\n}) => {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const title = initialData ? \"Edit product\" : \"Create product\";\r\n  const description = initialData ? \"Edit a product.\" : \"Add a new product\";\r\n  const toastMessage = initialData ? \"Product updated.\" : \"Product created.\";\r\n  const action = initialData ? \"Save changes\" : \"Create\";\r\n\r\n  const defaultValues = initialData\r\n    ? initialData\r\n    : {\r\n        name: \"\",\r\n        description: \"\",\r\n        price: 0,\r\n        imgUrl: [],\r\n        category: \"\",\r\n      };\r\n\r\n  const form = useForm<ProductFormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const onSubmit = async (data: ProductFormValues) => {\r\n    try {\r\n      setLoading(true);\r\n      if (initialData) {\r\n        // await axios.post(`/api/products/edit-product/${initialData._id}`, data);\r\n      } else {\r\n        // const res = await axios.post(`/api/products/create-product`, data);\r\n        // console.log(\"product\", res);\r\n      }\r\n      router.refresh();\r\n      router.push(`/dashboard/products`);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Uh oh! Something went wrong.\",\r\n        description: \"There was a problem with your request.\",\r\n      });\r\n    } catch (error: any) {\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Uh oh! Something went wrong.\",\r\n        description: \"There was a problem with your request.\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const onDelete = async () => {\r\n    try {\r\n      setLoading(true);\r\n      //   await axios.delete(`/api/${params.storeId}/products/${params.productId}`);\r\n      router.refresh();\r\n      router.push(`/${params.storeId}/products`);\r\n    } catch (error: any) {\r\n    } finally {\r\n      setLoading(false);\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const triggerImgUrlValidation = () => form.trigger(\"imgUrl\");\r\n\r\n  return (\r\n    <>\r\n      {/* <AlertModal\r\n        isOpen={open}\r\n        onClose={() => setOpen(false)}\r\n        onConfirm={onDelete}\r\n        loading={loading}\r\n      /> */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <Heading title={title} description={description} />\r\n        {initialData && (\r\n          <Button\r\n            disabled={loading}\r\n            variant=\"destructive\"\r\n            size=\"sm\"\r\n            onClick={() => setOpen(true)}\r\n          >\r\n            <Trash className=\"h-4 w-4\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <Separator />\r\n      <Form {...form}>\r\n        <form\r\n          onSubmit={form.handleSubmit(onSubmit)}\r\n          className=\"space-y-8 w-full\"\r\n        >\r\n          <FormField\r\n            control={form.control}\r\n            name=\"imgUrl\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Images</FormLabel>\r\n                <FormControl>\r\n                  <FileUpload\r\n                    onChange={field.onChange}\r\n                    value={field.value}\r\n                    onRemove={field.onChange}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <div className=\"md:grid md:grid-cols-3 gap-8\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={loading}\r\n                      placeholder=\"Product name\"\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"description\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Description</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={loading}\r\n                      placeholder=\"Product description\"\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"price\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Price</FormLabel>\r\n                  <FormControl>\r\n                    <Input type=\"number\" disabled={loading} {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"category\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Category</FormLabel>\r\n                  <Select\r\n                    disabled={loading}\r\n                    onValueChange={field.onChange}\r\n                    value={field.value}\r\n                    defaultValue={field.value}\r\n                  >\r\n                    <FormControl>\r\n                      <SelectTrigger>\r\n                        <SelectValue\r\n                          defaultValue={field.value}\r\n                          placeholder=\"Select a category\"\r\n                        />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      {/* @ts-ignore  */}\r\n                      {categories.map((category) => (\r\n                        <SelectItem key={category._id} value={category._id}>\r\n                          {category.name}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <Button disabled={loading} className=\"ml-auto\" type=\"submit\">\r\n            {action}\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\product-form.tsx",["533","534","535","536","537","538","539","540"],[],"\"use client\";\r\nimport * as z from \"zod\";\r\nimport { useState } from \"react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Trash } from \"lucide-react\";\r\nimport { useParams, useRouter } from \"next/navigation\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { Heading } from \"@/components/ui/heading\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\n// import FileUpload from \"@/components/FileUpload\";\r\nimport { useToast } from \"../ui/use-toast\";\r\nimport FileUpload from \"../file-upload\";\r\nconst ImgSchema = z.object({\r\n  fileName: z.string(),\r\n  name: z.string(),\r\n  fileSize: z.number(),\r\n  size: z.number(),\r\n  fileKey: z.string(),\r\n  key: z.string(),\r\n  fileUrl: z.string(),\r\n  url: z.string(),\r\n});\r\nexport const IMG_MAX_LIMIT = 3;\r\nconst formSchema = z.object({\r\n  name: z\r\n    .string()\r\n    .min(3, { message: \"Product Name must be at least 3 characters\" }),\r\n  imgUrl: z\r\n    .array(ImgSchema)\r\n    .max(IMG_MAX_LIMIT, { message: \"You can only add up to 3 images\" })\r\n    .min(1, { message: \"At least one image must be added.\" }),\r\n  description: z\r\n    .string()\r\n    .min(3, { message: \"Product description must be at least 3 characters\" }),\r\n  price: z.coerce.number(),\r\n  category: z.string().min(1, { message: \"Please select a category\" }),\r\n});\r\n\r\ntype ProductFormValues = z.infer<typeof formSchema>;\r\n\r\ninterface ProductFormProps {\r\n  initialData: any | null;\r\n  categories: any;\r\n}\r\n\r\nexport const ProductForm: React.FC<ProductFormProps> = ({\r\n  initialData,\r\n  categories,\r\n}) => {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const { toast } = useToast();\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [imgLoading, setImgLoading] = useState(false);\r\n  const title = initialData ? \"Edit product\" : \"Create product\";\r\n  const description = initialData ? \"Edit a product.\" : \"Add a new product\";\r\n  const toastMessage = initialData ? \"Product updated.\" : \"Product created.\";\r\n  const action = initialData ? \"Save changes\" : \"Create\";\r\n\r\n  const defaultValues = initialData\r\n    ? initialData\r\n    : {\r\n        name: \"\",\r\n        description: \"\",\r\n        price: 0,\r\n        imgUrl: [],\r\n        category: \"\",\r\n      };\r\n\r\n  const form = useForm<ProductFormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const onSubmit = async (data: ProductFormValues) => {\r\n    try {\r\n      setLoading(true);\r\n      if (initialData) {\r\n        // await axios.post(`/api/products/edit-product/${initialData._id}`, data);\r\n      } else {\r\n        // const res = await axios.post(`/api/products/create-product`, data);\r\n        // console.log(\"product\", res);\r\n      }\r\n      router.refresh();\r\n      router.push(`/dashboard/products`);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Uh oh! Something went wrong.\",\r\n        description: \"There was a problem with your request.\",\r\n      });\r\n    } catch (error: any) {\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Uh oh! Something went wrong.\",\r\n        description: \"There was a problem with your request.\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const onDelete = async () => {\r\n    try {\r\n      setLoading(true);\r\n      //   await axios.delete(`/api/${params.storeId}/products/${params.productId}`);\r\n      router.refresh();\r\n      router.push(`/${params.storeId}/products`);\r\n    } catch (error: any) {\r\n    } finally {\r\n      setLoading(false);\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const triggerImgUrlValidation = () => form.trigger(\"imgUrl\");\r\n\r\n  return (\r\n    <>\r\n      {/* <AlertModal\r\n        isOpen={open}\r\n        onClose={() => setOpen(false)}\r\n        onConfirm={onDelete}\r\n        loading={loading}\r\n      /> */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <Heading title={title} description={description} />\r\n        {initialData && (\r\n          <Button\r\n            disabled={loading}\r\n            variant=\"destructive\"\r\n            size=\"sm\"\r\n            onClick={() => setOpen(true)}\r\n          >\r\n            <Trash className=\"h-4 w-4\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <Separator />\r\n      <Form {...form}>\r\n        <form\r\n          onSubmit={form.handleSubmit(onSubmit)}\r\n          className=\"space-y-8 w-full\"\r\n        >\r\n          <FormField\r\n            control={form.control}\r\n            name=\"imgUrl\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Images</FormLabel>\r\n                <FormControl>\r\n                  <FileUpload\r\n                    onChange={field.onChange}\r\n                    value={field.value}\r\n                    onRemove={field.onChange}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <div className=\"md:grid md:grid-cols-3 gap-8\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={loading}\r\n                      placeholder=\"Product name\"\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"description\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Description</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      disabled={loading}\r\n                      placeholder=\"Product description\"\r\n                      {...field}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"price\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Price</FormLabel>\r\n                  <FormControl>\r\n                    <Input type=\"number\" disabled={loading} {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              control={form.control}\r\n              name=\"category\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Category</FormLabel>\r\n                  <Select\r\n                    disabled={loading}\r\n                    onValueChange={field.onChange}\r\n                    value={field.value}\r\n                    defaultValue={field.value}\r\n                  >\r\n                    <FormControl>\r\n                      <SelectTrigger>\r\n                        <SelectValue\r\n                          defaultValue={field.value}\r\n                          placeholder=\"Select a category\"\r\n                        />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      {/* @ts-ignore  */}\r\n                      {categories.map((category) => (\r\n                        <SelectItem key={category._id} value={category._id}>\r\n                          {category.name}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          <Button disabled={loading} className=\"ml-auto\" type=\"submit\">\r\n            {action}\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\user-auth-form.tsx",["541"],[],"\"use client\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { signIn } from \"next-auth/react\";\r\nimport { useSearchParams } from \"next/navigation\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as z from \"zod\";\r\nimport GoogleSignInButton from \"../github-auth-button\";\r\n\r\nconst formSchema = z.object({\r\n  email: z.string().email({ message: \"Enter a valid email address\" }),\r\n});\r\n\r\ntype UserFormValue = z.infer<typeof formSchema>;\r\n\r\nexport default function UserAuthForm() {\r\n  const searchParams = useSearchParams();\r\n  const callbackUrl = searchParams.get(\"callbackUrl\");\r\n  const [loading, setLoading] = useState(false);\r\n  const defaultValues = {\r\n    email: \"demo@gmail.com\",\r\n  };\r\n  const form = useForm<UserFormValue>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const onSubmit = async (data: UserFormValue) => {\r\n    signIn(\"credentials\", {\r\n      email: data.email,\r\n      callbackUrl: callbackUrl ?? \"/dashboard\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form {...form}>\r\n        <form\r\n          onSubmit={form.handleSubmit(onSubmit)}\r\n          className=\"space-y-2 w-full\"\r\n        >\r\n          <FormField\r\n            control={form.control}\r\n            name=\"email\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Email</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter your email...\"\r\n                    disabled={loading}\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <Button disabled={loading} className=\"ml-auto w-full\" type=\"submit\">\r\n            Continue With Email\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n      <div className=\"relative\">\r\n        <div className=\"absolute inset-0 flex items-center\">\r\n          <span className=\"w-full border-t\" />\r\n        </div>\r\n        <div className=\"relative flex justify-center text-xs uppercase\">\r\n          <span className=\"bg-background px-2 text-muted-foreground\">\r\n            Or continue with\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <GoogleSignInButton />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\forms\\user-profile-stepper\\create-profile.tsx",["542","543","544","545","546","547","548","549","550"],[],"\"use client\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Heading } from \"@/components/ui/heading\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { profileSchema, type ProfileFormValues } from \"@/lib/form-schema\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { AlertTriangleIcon, Trash, Trash2Icon } from \"lucide-react\";\r\nimport { useParams, useRouter } from \"next/navigation\";\r\nimport { useState } from \"react\";\r\nimport { SubmitHandler, useFieldArray, useForm } from \"react-hook-form\";\r\n\r\ninterface ProfileFormType {\r\n  initialData: any | null;\r\n  categories: any;\r\n}\r\n\r\nexport const CreateProfileOne: React.FC<ProfileFormType> = ({\r\n  initialData,\r\n  categories,\r\n}) => {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [imgLoading, setImgLoading] = useState(false);\r\n  const title = initialData ? \"Edit product\" : \"Create Your Profile\";\r\n  const description = initialData\r\n    ? \"Edit a product.\"\r\n    : \"To create your resume, we first need some basic information about you.\";\r\n  const toastMessage = initialData ? \"Product updated.\" : \"Product created.\";\r\n  const action = initialData ? \"Save changes\" : \"Create\";\r\n  const [previousStep, setPreviousStep] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [data, setData] = useState({});\r\n  const delta = currentStep - previousStep;\r\n\r\n  const defaultValues = {\r\n    jobs: [\r\n      {\r\n        jobtitle: \"\",\r\n        employer: \"\",\r\n        startdate: \"\",\r\n        enddate: \"\",\r\n        jobcountry: \"\",\r\n        jobcity: \"\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const form = useForm<ProfileFormValues>({\r\n    resolver: zodResolver(profileSchema),\r\n    defaultValues,\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n  } = form;\r\n\r\n  const { append, remove, fields } = useFieldArray({\r\n    control,\r\n    name: \"jobs\",\r\n  });\r\n\r\n  const onSubmit = async (data: ProfileFormValues) => {\r\n    try {\r\n      setLoading(true);\r\n      if (initialData) {\r\n        // await axios.post(`/api/products/edit-product/${initialData._id}`, data);\r\n      } else {\r\n        // const res = await axios.post(`/api/products/create-product`, data);\r\n        // console.log(\"product\", res);\r\n      }\r\n      router.refresh();\r\n      router.push(`/dashboard/products`);\r\n    } catch (error: any) {\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const onDelete = async () => {\r\n    try {\r\n      setLoading(true);\r\n      //   await axios.delete(`/api/${params.storeId}/products/${params.productId}`);\r\n      router.refresh();\r\n      router.push(`/${params.storeId}/products`);\r\n    } catch (error: any) {\r\n    } finally {\r\n      setLoading(false);\r\n      setOpen(false);\r\n    }\r\n  };\r\n\r\n  const processForm: SubmitHandler<ProfileFormValues> = (data) => {\r\n    console.log(\"data ==>\", data);\r\n    setData(data);\r\n    // api call and reset\r\n    // form.reset();\r\n  };\r\n\r\n  type FieldName = keyof ProfileFormValues;\r\n\r\n  const steps = [\r\n    {\r\n      id: \"Step 1\",\r\n      name: \"Personal Information\",\r\n      fields: [\r\n        \"firstname\",\r\n        \"lastname\",\r\n        \"email\",\r\n        \"contactno\",\r\n        \"country\",\r\n        \"city\",\r\n      ],\r\n    },\r\n    {\r\n      id: \"Step 2\",\r\n      name: \"Professional Informations\",\r\n      // fields are mapping and flattening for the error to be trigger  for the dynamic fields\r\n      fields: fields\r\n        ?.map((_, index) => [\r\n          `jobs.${index}.jobtitle`,\r\n          `jobs.${index}.employer`,\r\n          `jobs.${index}.startdate`,\r\n          `jobs.${index}.enddate`,\r\n          `jobs.${index}.jobcountry`,\r\n          `jobs.${index}.jobcity`,\r\n          // Add other field names as needed\r\n        ])\r\n        .flat(),\r\n    },\r\n    { id: \"Step 3\", name: \"Complete\" },\r\n  ];\r\n\r\n  const next = async () => {\r\n    const fields = steps[currentStep].fields;\r\n\r\n    const output = await form.trigger(fields as FieldName[], {\r\n      shouldFocus: true,\r\n    });\r\n\r\n    if (!output) return;\r\n\r\n    if (currentStep < steps.length - 1) {\r\n      if (currentStep === steps.length - 2) {\r\n        await form.handleSubmit(processForm)();\r\n      }\r\n      setPreviousStep(currentStep);\r\n      setCurrentStep((step) => step + 1);\r\n    }\r\n  };\r\n\r\n  const prev = () => {\r\n    if (currentStep > 0) {\r\n      setPreviousStep(currentStep);\r\n      setCurrentStep((step) => step - 1);\r\n    }\r\n  };\r\n\r\n  const countries = [{ id: \"wow\", name: \"india\" }];\r\n  const cities = [{ id: \"2\", name: \"kerala\" }];\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex items-center justify-between\">\r\n        <Heading title={title} description={description} />\r\n        {initialData && (\r\n          <Button\r\n            disabled={loading}\r\n            variant=\"destructive\"\r\n            size=\"sm\"\r\n            onClick={() => setOpen(true)}\r\n          >\r\n            <Trash className=\"h-4 w-4\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <Separator />\r\n      <div>\r\n        <ul className=\"flex gap-4\">\r\n          {steps.map((step, index) => (\r\n            <li key={step.name} className=\"md:flex-1\">\r\n              {currentStep > index ? (\r\n                <div className=\"group flex w-full flex-col border-l-4 border-sky-600 py-2 pl-4 transition-colors md:border-l-0 md:border-t-4 md:pb-0 md:pl-0 md:pt-4\">\r\n                  <span className=\"text-sm font-medium text-sky-600 transition-colors \">\r\n                    {step.id}\r\n                  </span>\r\n                  <span className=\"text-sm font-medium\">{step.name}</span>\r\n                </div>\r\n              ) : currentStep === index ? (\r\n                <div\r\n                  className=\"flex w-full flex-col border-l-4 border-sky-600 py-2 pl-4 md:border-l-0 md:border-t-4 md:pb-0 md:pl-0 md:pt-4\"\r\n                  aria-current=\"step\"\r\n                >\r\n                  <span className=\"text-sm font-medium text-sky-600\">\r\n                    {step.id}\r\n                  </span>\r\n                  <span className=\"text-sm font-medium\">{step.name}</span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"group flex h-full w-full flex-col border-l-4 border-gray-200 py-2 pl-4 transition-colors md:border-l-0 md:border-t-4 md:pb-0 md:pl-0 md:pt-4\">\r\n                  <span className=\"text-sm font-medium text-gray-500 transition-colors\">\r\n                    {step.id}\r\n                  </span>\r\n                  <span className=\"text-sm font-medium\">{step.name}</span>\r\n                </div>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <Separator />\r\n      <Form {...form}>\r\n        <form\r\n          onSubmit={form.handleSubmit(processForm)}\r\n          className=\"space-y-8 w-full\"\r\n        >\r\n          <div\r\n            className={cn(\r\n              currentStep === 1\r\n                ? \"md:inline-block w-full\"\r\n                : \"md:grid md:grid-cols-3 gap-8\",\r\n            )}\r\n          >\r\n            {currentStep === 0 && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"firstname\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>First Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={loading}\r\n                          placeholder=\"John\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"lastname\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Last Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={loading}\r\n                          placeholder=\"Doe\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Email</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          disabled={loading}\r\n                          placeholder=\"johndoe@gmail.com\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"contactno\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Contact Number</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          placeholder=\"Enter you contact number\"\r\n                          disabled={loading}\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"country\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Country</FormLabel>\r\n                      <Select\r\n                        disabled={loading}\r\n                        onValueChange={field.onChange}\r\n                        value={field.value}\r\n                        defaultValue={field.value}\r\n                      >\r\n                        <FormControl>\r\n                          <SelectTrigger>\r\n                            <SelectValue\r\n                              defaultValue={field.value}\r\n                              placeholder=\"Select a country\"\r\n                            />\r\n                          </SelectTrigger>\r\n                        </FormControl>\r\n                        <SelectContent>\r\n                          {/* @ts-ignore  */}\r\n                          {countries.map((country) => (\r\n                            <SelectItem key={country.id} value={country.id}>\r\n                              {country.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"city\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>City</FormLabel>\r\n                      <Select\r\n                        disabled={loading}\r\n                        onValueChange={field.onChange}\r\n                        value={field.value}\r\n                        defaultValue={field.value}\r\n                      >\r\n                        <FormControl>\r\n                          <SelectTrigger>\r\n                            <SelectValue\r\n                              defaultValue={field.value}\r\n                              placeholder=\"Select a city\"\r\n                            />\r\n                          </SelectTrigger>\r\n                        </FormControl>\r\n                        <SelectContent>\r\n                          {/* @ts-ignore  */}\r\n                          {cities.map((city) => (\r\n                            <SelectItem key={city.id} value={city.id}>\r\n                              {city.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </>\r\n            )}\r\n            {currentStep === 1 && (\r\n              <>\r\n                {fields?.map((field, index) => (\r\n                  <Accordion\r\n                    type=\"single\"\r\n                    collapsible\r\n                    defaultValue=\"item-1\"\r\n                    key={field.id}\r\n                  >\r\n                    <AccordionItem value=\"item-1\">\r\n                      <AccordionTrigger\r\n                        className={cn(\r\n                          \"[&[data-state=closed]>button]:hidden [&[data-state=open]>.alert]:hidden relative !no-underline\",\r\n                          errors?.jobs?.[index] && \"text-red-700\",\r\n                        )}\r\n                      >\r\n                        {`Work Experience ${index + 1}`}\r\n\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"icon\"\r\n                          className=\"absolute right-8\"\r\n                          onClick={() => remove(index)}\r\n                        >\r\n                          <Trash2Icon className=\"h-4 w-4 \" />\r\n                        </Button>\r\n                        {errors?.jobs?.[index] && (\r\n                          <span className=\"absolute alert right-8\">\r\n                            <AlertTriangleIcon className=\"h-4 w-4   text-red-700\" />\r\n                          </span>\r\n                        )}\r\n                      </AccordionTrigger>\r\n                      <AccordionContent>\r\n                        <div\r\n                          className={cn(\r\n                            \"md:grid md:grid-cols-3 gap-8 border p-4 rounded-md relative mb-4\",\r\n                          )}\r\n                        >\r\n                          <FormField\r\n                            control={form.control}\r\n                            name={`jobs.${index}.jobtitle`}\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>Job title</FormLabel>\r\n                                <FormControl>\r\n                                  <Input\r\n                                    type=\"text\"\r\n                                    disabled={loading}\r\n                                    {...field}\r\n                                  />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                          <FormField\r\n                            control={form.control}\r\n                            name={`jobs.${index}.employer`}\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>Employer</FormLabel>\r\n                                <FormControl>\r\n                                  <Input\r\n                                    type=\"text\"\r\n                                    disabled={loading}\r\n                                    {...field}\r\n                                  />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                          <FormField\r\n                            control={form.control}\r\n                            name={`jobs.${index}.startdate`}\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>Start date</FormLabel>\r\n                                <FormControl>\r\n                                  <Input\r\n                                    type=\"date\"\r\n                                    disabled={loading}\r\n                                    {...field}\r\n                                  />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                          <FormField\r\n                            control={form.control}\r\n                            name={`jobs.${index}.enddate`}\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>End date</FormLabel>\r\n                                <FormControl>\r\n                                  <Input\r\n                                    type=\"date\"\r\n                                    disabled={loading}\r\n                                    {...field}\r\n                                  />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                          <FormField\r\n                            control={form.control}\r\n                            name={`jobs.${index}.jobcountry`}\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>Job country</FormLabel>\r\n                                <Select\r\n                                  disabled={loading}\r\n                                  onValueChange={field.onChange}\r\n                                  value={field.value}\r\n                                  defaultValue={field.value}\r\n                                >\r\n                                  <FormControl>\r\n                                    <SelectTrigger>\r\n                                      <SelectValue\r\n                                        defaultValue={field.value}\r\n                                        placeholder=\"Select your job country\"\r\n                                      />\r\n                                    </SelectTrigger>\r\n                                  </FormControl>\r\n                                  <SelectContent>\r\n                                    {countries.map((country) => (\r\n                                      <SelectItem\r\n                                        key={country.id}\r\n                                        value={country.id}\r\n                                      >\r\n                                        {country.name}\r\n                                      </SelectItem>\r\n                                    ))}\r\n                                  </SelectContent>\r\n                                </Select>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                          <FormField\r\n                            control={form.control}\r\n                            name={`jobs.${index}.jobcity`}\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>Job city</FormLabel>\r\n                                <Select\r\n                                  disabled={loading}\r\n                                  onValueChange={field.onChange}\r\n                                  value={field.value}\r\n                                  defaultValue={field.value}\r\n                                >\r\n                                  <FormControl>\r\n                                    <SelectTrigger>\r\n                                      <SelectValue\r\n                                        defaultValue={field.value}\r\n                                        placeholder=\"Select your job city\"\r\n                                      />\r\n                                    </SelectTrigger>\r\n                                  </FormControl>\r\n                                  <SelectContent>\r\n                                    {cities.map((city) => (\r\n                                      <SelectItem key={city.id} value={city.id}>\r\n                                        {city.name}\r\n                                      </SelectItem>\r\n                                    ))}\r\n                                  </SelectContent>\r\n                                </Select>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </AccordionContent>\r\n                    </AccordionItem>\r\n                  </Accordion>\r\n                ))}\r\n\r\n                <div className=\"flex justify-center mt-4\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    className=\"flex justify-center\"\r\n                    size={\"lg\"}\r\n                    onClick={() =>\r\n                      append({\r\n                        jobtitle: \"\",\r\n                        employer: \"\",\r\n                        startdate: \"\",\r\n                        enddate: \"\",\r\n                        jobcountry: \"\",\r\n                        jobcity: \"\",\r\n                      })\r\n                    }\r\n                  >\r\n                    Add More\r\n                  </Button>\r\n                </div>\r\n              </>\r\n            )}\r\n            {currentStep === 2 && (\r\n              <div>\r\n                <h1>Completed</h1>\r\n                <pre className=\"whitespace-pre-wrap\">\r\n                  {JSON.stringify(data)}\r\n                </pre>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* <Button disabled={loading} className=\"ml-auto\" type=\"submit\">\r\n            {action}\r\n          </Button> */}\r\n        </form>\r\n      </Form>\r\n      {/* Navigation */}\r\n      <div className=\"mt-8 pt-5\">\r\n        <div className=\"flex justify-between\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={prev}\r\n            disabled={currentStep === 0}\r\n            className=\"rounded bg-white px-2 py-1 text-sm font-semibold text-sky-900 shadow-sm ring-1 ring-inset ring-sky-300 hover:bg-sky-50 disabled:cursor-not-allowed disabled:opacity-50\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"currentColor\"\r\n              className=\"h-6 w-6\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M15.75 19.5L8.25 12l7.5-7.5\"\r\n              />\r\n            </svg>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            onClick={next}\r\n            disabled={currentStep === steps.length - 1}\r\n            className=\"rounded bg-white px-2 py-1 text-sm font-semibold text-sky-900 shadow-sm ring-1 ring-inset ring-sky-300 hover:bg-sky-50 disabled:cursor-not-allowed disabled:opacity-50\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"currentColor\"\r\n              className=\"h-6 w-6\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M8.25 4.5l7.5 7.5-7.5 7.5\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\github-auth-button.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\icons.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\Check.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\CountrySelect.tsx",["551","552"],[],"\"use client\";\r\n\r\nimport React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nimport useCountries from \"@/hooks/useCountries\";\r\nimport { FieldErrors, FieldValues, UseFormRegister } from \"react-hook-form\";\r\n\r\nexport type CountrySelectValue = {\r\n  value: string;\r\n  flag: string;\r\n  label: string;\r\n};\r\n\r\ninterface CountrySelectProps {\r\n  id: string;\r\n  label: String;\r\n  value?: CountrySelectValue;\r\n  register: UseFormRegister<FieldValues>;\r\n  onChange: (value: CountrySelectValue) => void;\r\n  errors: FieldErrors;\r\n}\r\n\r\nconst CountrySelect: React.FC<CountrySelectProps> = ({\r\n  id,\r\n  label,\r\n  value,\r\n  register,\r\n  onChange,\r\n  errors,\r\n}) => {\r\n  const { getAll } = useCountries();\r\n  return (\r\n    <div className=\"relative flex flex-col w-full gap-y-2.5\">\r\n      <label\r\n        className={`\r\n            text-xs font-medium leading-4 text-[#7E88C3] dark:text-[#DFE3FA]\r\n            ${errors[id] && \"text-[#EC5757] dark:text-[#EC5757]\"}\r\n        `}\r\n      >\r\n        {label}\r\n      </label>\r\n      <Select\r\n        instanceId={id}\r\n        {...register(id, {\r\n          required: {\r\n            value: true,\r\n            message: \"can't be empty\",\r\n          },\r\n        })}\r\n        placeholder=\"Select country\"\r\n        isClearable\r\n        options={getAll()}\r\n        value={value}\r\n        onChange={(value) => onChange(value as CountrySelectValue)}\r\n        formatOptionLabel={(option: any) => (\r\n          <div className=\"flex flex-row items-center gap-3\">\r\n            <div>{option.flag}</div>\r\n            <div>{option.label}</div>\r\n          </div>\r\n        )}\r\n        className={`${errors[id] && \"react-select-error\"}`}\r\n        classNamePrefix=\"react-select\"\r\n        theme={(theme) => ({\r\n          ...theme,\r\n          colors: {\r\n            ...theme.colors,\r\n            borderRadius: \"4px\",\r\n            borderWidth: \"1px\",\r\n            primary: \"#7C5DFA\",\r\n            primary25: \"transparent\",\r\n          },\r\n        })}\r\n      />\r\n      {errors[id] && (\r\n        <span className=\"absolute top-0 right-0 text-[7px] font-medium text-[#EC5757] lowercase max-w-[40px]\">\r\n          {errors[id]?.message as string}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountrySelect;\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\DatePicker.tsx",["553","554"],[],"import DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { FieldErrors, FieldValues, UseFormRegister } from \"react-hook-form\";\r\n\r\ninterface DatePickerInputProps {\r\n  id: string;\r\n  value: Date;\r\n  label: string;\r\n  register: UseFormRegister<FieldValues>;\r\n  onChange: (value: Date) => void;\r\n  errors: FieldErrors;\r\n}\r\n\r\nconst DatePickerInput: React.FC<DatePickerInputProps> = ({\r\n  id,\r\n  value,\r\n  label,\r\n  register,\r\n  onChange,\r\n  errors,\r\n}) => {\r\n  return (\r\n    <div className=\"relative flex flex-col w-full gap-y-2.5\">\r\n      <label\r\n        className={`\r\n            text-xs font-medium leading-4 text-[#7E88C3] dark:text-[#DFE3FA]\r\n            ${errors[id] && \"text-[#EC5757] dark:text-[#EC5757]\"}\r\n        `}\r\n      >\r\n        {label}\r\n      </label>\r\n      <DatePicker\r\n        {...register(id, {\r\n          required: {\r\n            value: true,\r\n            message: \"can't be empty\",\r\n          },\r\n        })}\r\n        selected={value}\r\n        onChange={(value) => onChange(value as Date)}\r\n        className={`text-xs w-full py-4 px-5 font-bold bg-white dark:bg-[#1E2139] text-[#0C0E16] dark:text-white border border-[#DFE3FA] dark:border-[#252945] rounded outline-none transition disabled:cursor-not-allowed\r\n                    ${\r\n                      errors[id] &&\r\n                      \"border-[#EC5757] focus:border-[#EC5757] dark:border-[#EC5757] dark:focus:border-[#EC5757]\"\r\n                    }`}\r\n        dateFormat=\"dd MMM yyyy\"\r\n      />\r\n      {errors[id] && (\r\n        <span className=\"absolute top-0 right-0 text-[7px] font-medium text-[#EC5757] lowercase max-w-[40px]\">\r\n          {errors[id]?.message as string}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePickerInput;\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\Input.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\inputs\\Select.tsx",["555"],[],"\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { FieldErrors, FieldValues, UseFormRegister } from \"react-hook-form\";\r\nimport Select from \"react-select\";\r\n\r\nexport type SelectValue = {\r\n  value: string;\r\n  label?: string;\r\n};\r\n\r\ninterface SelectProps {\r\n  id: string;\r\n  label: string;\r\n  value?: SelectValue;\r\n  register: UseFormRegister<FieldValues>;\r\n  onChange: (value: string) => void;\r\n  errors: FieldErrors;\r\n}\r\n\r\nconst CountrySelect: React.FC<SelectProps> = ({\r\n  id,\r\n  label,\r\n  register,\r\n  value,\r\n  onChange,\r\n  errors,\r\n}) => {\r\n  const options = [\r\n    { value: \"NET1\", label: \"Net 1 Day\" },\r\n    { value: \"NET7\", label: \"Net 7 Days\" },\r\n    { value: \"NET14\", label: \"Net 14 Days\" },\r\n    { value: \"NET30\", label: \"Net 30 Days\" },\r\n  ];\r\n  return (\r\n    <div className=\"relative flex flex-col w-full gap-y-2.5\">\r\n      <label\r\n        className={`\r\n            text-xs font-medium leading-4 text-[#7E88C3] dark:text-[#DFE3FA]\r\n            ${errors[id] && \"text-[#EC5757] dark:text-[#EC5757]\"}\r\n        `}\r\n      >\r\n        {label}\r\n      </label>\r\n      <Select\r\n        instanceId={id}\r\n        {...register(id, {\r\n          required: {\r\n            value: true,\r\n            message: \"can't be empty\",\r\n          },\r\n        })}\r\n        placeholder=\"Select\"\r\n        isClearable\r\n        options={options}\r\n        value={value}\r\n        onChange={(value) => onChange(value as string)}\r\n        formatOptionLabel={(option: any) => <span>{option.label}</span>}\r\n        className={`${errors[id] && \"react-select-error\"}`}\r\n        classNamePrefix=\"react-select\"\r\n        theme={(theme) => ({\r\n          ...theme,\r\n          colors: {\r\n            ...theme.colors,\r\n            borderRadius: \"4px\",\r\n            borderWidth: \"1px\",\r\n            primary: \"#7C5DFA\",\r\n            primary25: \"transparent\",\r\n          },\r\n        })}\r\n      />\r\n      {errors[id] && (\r\n        <span className=\"absolute top-0 right-0 text-[7px] font-medium text-[#EC5757] lowercase max-w-[40px]\">\r\n          {errors[id]?.message as string}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountrySelect;\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\board-column.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\column-action.tsx",["556","557"],[],"\"use client\";\r\nimport { DotsHorizontalIcon } from \"@radix-ui/react-icons\";\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useToast } from \"@/components/ui/use-toast\";\r\nimport { useTaskStore } from \"@/lib/store\";\r\nimport { UniqueIdentifier } from \"@dnd-kit/core\";\r\nimport { Input } from \"../ui/input\";\r\n\r\nexport function ColumnActions({\r\n  title,\r\n  id,\r\n}: {\r\n  title: string;\r\n  id: UniqueIdentifier;\r\n}) {\r\n  const [open, setIsOpen] = React.useState(false);\r\n  const [name, setName] = React.useState(title);\r\n  const updateCol = useTaskStore((state) => state.updateCol);\r\n  const removeCol = useTaskStore((state) => state.removeCol);\r\n  const [editDisable, setIsEditDisable] = React.useState(true);\r\n  const [showDeleteDialog, setShowDeleteDialog] = React.useState(false);\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const { toast } = useToast();\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          setIsEditDisable(!editDisable);\r\n          updateCol(id, name);\r\n          toast({\r\n            title: \"Name Updated\",\r\n            variant: \"default\",\r\n            description: `${title} updated to ${name}`,\r\n          });\r\n        }}\r\n      >\r\n        <Input\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          className=\"text-base !mt-0 mr-auto disabled:opacity-100 disabled:cursor-pointer disabled:border-none\"\r\n          disabled={editDisable}\r\n          ref={inputRef}\r\n        />\r\n      </form>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button variant=\"secondary\" className=\"ml-1\">\r\n            <span className=\"sr-only\">Actions</span>\r\n            <DotsHorizontalIcon className=\"h-4 w-4\" />\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"end\">\r\n          <DropdownMenuItem\r\n            onSelect={() => {\r\n              setIsEditDisable(!editDisable);\r\n              setTimeout(() => {\r\n                inputRef.current && inputRef.current?.focus();\r\n              }, 500);\r\n            }}\r\n          >\r\n            Rename\r\n          </DropdownMenuItem>\r\n          <DropdownMenuSeparator />\r\n\r\n          <DropdownMenuItem\r\n            onSelect={() => setShowDeleteDialog(true)}\r\n            className=\"text-red-600\"\r\n          >\r\n            Delete Section\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>\r\n              Are you sure want to delete column?\r\n            </AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              NOTE: All tasks related to this category will also be deleted.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n            <Button\r\n              variant=\"destructive\"\r\n              onClick={() => {\r\n                // yes, you have to set a timeout\r\n                setTimeout(() => (document.body.style.pointerEvents = \"\"), 100);\r\n\r\n                setShowDeleteDialog(false);\r\n                removeCol(id);\r\n                toast({\r\n                  description: \"This column has been deleted.\",\r\n                });\r\n              }}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\kanban-board.tsx",["558"],[],"\"use client\";\r\nimport { Fragment, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nimport { Task, useTaskStore } from \"@/lib/store\";\r\nimport { hasDraggableData } from \"@/lib/utils\";\r\nimport {\r\n  Announcements,\r\n  DndContext,\r\n  DragOverlay,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  UniqueIdentifier,\r\n  useSensor,\r\n  useSensors,\r\n  type DragEndEvent,\r\n  type DragOverEvent,\r\n  type DragStartEvent,\r\n} from \"@dnd-kit/core\";\r\nimport { SortableContext, arrayMove } from \"@dnd-kit/sortable\";\r\nimport type { Column } from \"./board-column\";\r\nimport { BoardColumn, BoardContainer } from \"./board-column\";\r\nimport NewSectionDialog from \"./new-section-dialog\";\r\nimport { TaskCard } from \"./task-card\";\r\n// import { coordinateGetter } from \"./multipleContainersKeyboardPreset\";\r\n\r\nconst defaultCols = [\r\n  {\r\n    id: \"TODO\" as const,\r\n    title: \"Todo\",\r\n  },\r\n  {\r\n    id: \"IN_PROGRESS\" as const,\r\n    title: \"In progress\",\r\n  },\r\n  {\r\n    id: \"DONE\" as const,\r\n    title: \"Done\",\r\n  },\r\n] satisfies Column[];\r\n\r\nexport type ColumnId = (typeof defaultCols)[number][\"id\"];\r\n\r\nconst initialTasks: Task[] = [\r\n  {\r\n    id: \"task1\",\r\n    status: \"DONE\",\r\n    title: \"Project initiation and planning\",\r\n  },\r\n  {\r\n    id: \"task2\",\r\n    status: \"DONE\",\r\n    title: \"Gather requirements from stakeholders\",\r\n  },\r\n];\r\nexport function KanbanBoard() {\r\n  // const [columns, setColumns] = useState<Column[]>(defaultCols);\r\n  const columns = useTaskStore((state) => state.columns);\r\n  const setColumns = useTaskStore((state) => state.setCols);\r\n  const pickedUpTaskColumn = useRef<ColumnId | null>(null);\r\n  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\r\n\r\n  // const [tasks, setTasks] = useState<Task[]>(initialTasks);\r\n  const tasks = useTaskStore((state) => state.tasks);\r\n  const setTasks = useTaskStore((state) => state.setTasks);\r\n  const [activeColumn, setActiveColumn] = useState<Column | null>(null);\r\n  const [isMounted, setIsMounted] = useState<Boolean>(false);\r\n\r\n  const [activeTask, setActiveTask] = useState<Task | null>(null);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor),\r\n    useSensor(TouchSensor),\r\n    // useSensor(KeyboardSensor, {\r\n    //   coordinateGetter: coordinateGetter,\r\n    // }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    setIsMounted(true);\r\n  }, [isMounted]);\r\n\r\n  useEffect(() => {\r\n    useTaskStore.persist.rehydrate();\r\n  }, []);\r\n  if (!isMounted) return;\r\n\r\n  function getDraggingTaskData(taskId: UniqueIdentifier, columnId: ColumnId) {\r\n    const tasksInColumn = tasks.filter((task) => task.status === columnId);\r\n    const taskPosition = tasksInColumn.findIndex((task) => task.id === taskId);\r\n    const column = columns.find((col) => col.id === columnId);\r\n    return {\r\n      tasksInColumn,\r\n      taskPosition,\r\n      column,\r\n    };\r\n  }\r\n\r\n  const announcements: Announcements = {\r\n    onDragStart({ active }) {\r\n      if (!hasDraggableData(active)) return;\r\n      if (active.data.current?.type === \"Column\") {\r\n        const startColumnIdx = columnsId.findIndex((id) => id === active.id);\r\n        const startColumn = columns[startColumnIdx];\r\n        return `Picked up Column ${startColumn?.title} at position: ${\r\n          startColumnIdx + 1\r\n        } of ${columnsId.length}`;\r\n      } else if (active.data.current?.type === \"Task\") {\r\n        pickedUpTaskColumn.current = active.data.current.task.status;\r\n        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\r\n          active.id,\r\n          pickedUpTaskColumn.current,\r\n        );\r\n        return `Picked up Task ${active.data.current.task.title} at position: ${\r\n          taskPosition + 1\r\n        } of ${tasksInColumn.length} in column ${column?.title}`;\r\n      }\r\n    },\r\n    onDragOver({ active, over }) {\r\n      if (!hasDraggableData(active) || !hasDraggableData(over)) return;\r\n\r\n      if (\r\n        active.data.current?.type === \"Column\" &&\r\n        over.data.current?.type === \"Column\"\r\n      ) {\r\n        const overColumnIdx = columnsId.findIndex((id) => id === over.id);\r\n        return `Column ${active.data.current.column.title} was moved over ${\r\n          over.data.current.column.title\r\n        } at position ${overColumnIdx + 1} of ${columnsId.length}`;\r\n      } else if (\r\n        active.data.current?.type === \"Task\" &&\r\n        over.data.current?.type === \"Task\"\r\n      ) {\r\n        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\r\n          over.id,\r\n          over.data.current.task.status,\r\n        );\r\n        if (over.data.current.task.status !== pickedUpTaskColumn.current) {\r\n          return `Task ${\r\n            active.data.current.task.title\r\n          } was moved over column ${column?.title} in position ${\r\n            taskPosition + 1\r\n          } of ${tasksInColumn.length}`;\r\n        }\r\n        return `Task was moved over position ${taskPosition + 1} of ${\r\n          tasksInColumn.length\r\n        } in column ${column?.title}`;\r\n      }\r\n    },\r\n    onDragEnd({ active, over }) {\r\n      if (!hasDraggableData(active) || !hasDraggableData(over)) {\r\n        pickedUpTaskColumn.current = null;\r\n        return;\r\n      }\r\n      if (\r\n        active.data.current?.type === \"Column\" &&\r\n        over.data.current?.type === \"Column\"\r\n      ) {\r\n        const overColumnPosition = columnsId.findIndex((id) => id === over.id);\r\n\r\n        return `Column ${\r\n          active.data.current.column.title\r\n        } was dropped into position ${overColumnPosition + 1} of ${\r\n          columnsId.length\r\n        }`;\r\n      } else if (\r\n        active.data.current?.type === \"Task\" &&\r\n        over.data.current?.type === \"Task\"\r\n      ) {\r\n        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\r\n          over.id,\r\n          over.data.current.task.status,\r\n        );\r\n        if (over.data.current.task.status !== pickedUpTaskColumn.current) {\r\n          return `Task was dropped into column ${column?.title} in position ${\r\n            taskPosition + 1\r\n          } of ${tasksInColumn.length}`;\r\n        }\r\n        return `Task was dropped into position ${taskPosition + 1} of ${\r\n          tasksInColumn.length\r\n        } in column ${column?.title}`;\r\n      }\r\n      pickedUpTaskColumn.current = null;\r\n    },\r\n    onDragCancel({ active }) {\r\n      pickedUpTaskColumn.current = null;\r\n      if (!hasDraggableData(active)) return;\r\n      return `Dragging ${active.data.current?.type} cancelled.`;\r\n    },\r\n  };\r\n\r\n  return (\r\n    <DndContext\r\n      accessibility={{\r\n        announcements,\r\n      }}\r\n      sensors={sensors}\r\n      onDragStart={onDragStart}\r\n      onDragEnd={onDragEnd}\r\n      onDragOver={onDragOver}\r\n    >\r\n      <BoardContainer>\r\n        <SortableContext items={columnsId}>\r\n          {columns?.map((col, index) => (\r\n            <Fragment key={col.id}>\r\n              <BoardColumn\r\n                column={col}\r\n                tasks={tasks.filter((task) => task.status === col.id)}\r\n              />\r\n              {index === columns?.length - 1 && (\r\n                <div className=\"w-[300px]\">\r\n                  <NewSectionDialog />\r\n                </div>\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n          {!columns.length && <NewSectionDialog />}\r\n        </SortableContext>\r\n      </BoardContainer>\r\n\r\n      {\"document\" in window &&\r\n        createPortal(\r\n          <DragOverlay>\r\n            {activeColumn && (\r\n              <BoardColumn\r\n                isOverlay\r\n                column={activeColumn}\r\n                tasks={tasks.filter((task) => task.status === activeColumn.id)}\r\n              />\r\n            )}\r\n            {activeTask && <TaskCard task={activeTask} isOverlay />}\r\n          </DragOverlay>,\r\n          document.body,\r\n        )}\r\n    </DndContext>\r\n  );\r\n\r\n  function onDragStart(event: DragStartEvent) {\r\n    if (!hasDraggableData(event.active)) return;\r\n    const data = event.active.data.current;\r\n    if (data?.type === \"Column\") {\r\n      setActiveColumn(data.column);\r\n      return;\r\n    }\r\n\r\n    if (data?.type === \"Task\") {\r\n      setActiveTask(data.task);\r\n      return;\r\n    }\r\n  }\r\n\r\n  function onDragEnd(event: DragEndEvent) {\r\n    setActiveColumn(null);\r\n    setActiveTask(null);\r\n\r\n    const { active, over } = event;\r\n    if (!over) return;\r\n\r\n    const activeId = active.id;\r\n    const overId = over.id;\r\n\r\n    if (!hasDraggableData(active)) return;\r\n\r\n    const activeData = active.data.current;\r\n\r\n    if (activeId === overId) return;\r\n\r\n    const isActiveAColumn = activeData?.type === \"Column\";\r\n    if (!isActiveAColumn) return;\r\n\r\n    const activeColumnIndex = columns.findIndex((col) => col.id === activeId);\r\n\r\n    const overColumnIndex = columns.findIndex((col) => col.id === overId);\r\n\r\n    setColumns(arrayMove(columns, activeColumnIndex, overColumnIndex));\r\n  }\r\n\r\n  function onDragOver(event: DragOverEvent) {\r\n    const { active, over } = event;\r\n    if (!over) return;\r\n\r\n    const activeId = active.id;\r\n    const overId = over.id;\r\n\r\n    if (activeId === overId) return;\r\n\r\n    if (!hasDraggableData(active) || !hasDraggableData(over)) return;\r\n\r\n    const activeData = active.data.current;\r\n    const overData = over.data.current;\r\n\r\n    const isActiveATask = activeData?.type === \"Task\";\r\n    const isOverATask = activeData?.type === \"Task\";\r\n\r\n    if (!isActiveATask) return;\r\n\r\n    // Im dropping a Task over another Task\r\n    if (isActiveATask && isOverATask) {\r\n      const activeIndex = tasks.findIndex((t) => t.id === activeId);\r\n      const overIndex = tasks.findIndex((t) => t.id === overId);\r\n      const activeTask = tasks[activeIndex];\r\n      const overTask = tasks[overIndex];\r\n      if (activeTask && overTask && activeTask.status !== overTask.status) {\r\n        activeTask.status = overTask.status;\r\n        setTasks(arrayMove(tasks, activeIndex, overIndex - 1));\r\n      }\r\n\r\n      setTasks(arrayMove(tasks, activeIndex, overIndex));\r\n    }\r\n\r\n    const isOverAColumn = overData?.type === \"Column\";\r\n\r\n    // Im dropping a Task over a column\r\n    if (isActiveATask && isOverAColumn) {\r\n      const activeIndex = tasks.findIndex((t) => t.id === activeId);\r\n      const activeTask = tasks[activeIndex];\r\n      if (activeTask) {\r\n        activeTask.status = overId as ColumnId;\r\n        setTasks(arrayMove(tasks, activeIndex, activeIndex));\r\n      }\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\new-section-dialog.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\new-task-dialog.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\kanban\\task-card.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\header.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\mobile-sidebar.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\providers.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\sidebar.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\ThemeToggle\\theme-provider.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\ThemeToggle\\theme-toggle.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\layout\\user-nav.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\modal\\alert-modal.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\overview.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\recent-sales.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Button.tsx",["559"],[],"\"use client\";\r\n\r\nimport { IconType } from \"react-icons\";\r\n\r\ninterface ButtonProps {\r\n  ariaLabel?: string;\r\n  label: string;\r\n  type?: \"button\" | \"submit\" | \"reset\";\r\n  onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  disabled?: boolean;\r\n  icon?: IconType;\r\n  base?: boolean;\r\n  grey?: boolean;\r\n  purple?: boolean;\r\n  red?: boolean;\r\n  darkGrey?: boolean;\r\n  customGrey?: boolean;\r\n  stretch?: boolean;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  ariaLabel,\r\n  label,\r\n  type,\r\n  onClick,\r\n  disabled,\r\n  icon: Icon,\r\n  base,\r\n  grey,\r\n  purple,\r\n  red,\r\n  darkGrey,\r\n  customGrey,\r\n  stretch,\r\n}) => {\r\n  return (\r\n    <button\r\n      aria-label={ariaLabel}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      type={type ? type : \"button\"}\r\n      className={`relative flex gap-4 items-center justify-center px-5 sm:px-6 py-4 text-xs font-bold capitalize rounded-full transition disabled:cursor-not-allowed disabled:bg-opacity-50 disabled:hover:bg-opacity-50\r\n        ${base && \"text-[#7E88C3] bg-baseBg hover:bg-baseBgHover\"}\r\n        ${red && \"text-white bg-[#ec5757] hover:bg-[#FF9797]\"}\r\n        ${purple && \"text-white bg-[#7C5DFA] hover:bg-[#9277FF]\"}\r\n        ${\r\n          grey &&\r\n          \"text-[#7E88C3] dark:text-[#DFE3FA] bg-defaultBg hover:bg-defaultHoverBg\"\r\n        }\r\n        ${darkGrey && \"text-secondary bg-grey hover:bg-greyHover\"}\r\n        ${customGrey && \"text-secondary bg-greyCustom hover:bg-greyCustomHover\"}\r\n        ${stretch && \"w-full\"}\r\n        ${Icon && \"sm:pl-12\"}\r\n      `}\r\n    >\r\n      {Icon && <Icon size={32} className=\"absolute left-0 ml-2\" />}\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Container.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\EmptyState.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Filter.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\HeaderControls.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\shared\\Loader.tsx",["560"],[],"\"use client\";\r\n\r\nimport { PacmanLoader } from \"react-spinners\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center h-full \">\r\n      <PacmanLoader size={35} color=\"#7C5DFA\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\employee-tables\\cell-action.tsx",["561","562"],[],"\"use client\";\r\nimport { AlertModal } from \"@/components/modal/alert-modal\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Employee } from \"@/constants/data\";\r\nimport { Edit, MoreHorizontal, Trash } from \"lucide-react\";\r\nimport { useParams, useRouter } from \"next/navigation\";\r\nimport { useState } from \"react\";\r\n\r\ninterface CellActionProps {\r\n  data: Employee;\r\n}\r\n\r\nexport const CellAction: React.FC<CellActionProps> = ({ data }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const router = useRouter();\r\n\r\n  const onConfirm = async () => {};\r\n\r\n  return (\r\n    <>\r\n      <AlertModal\r\n        isOpen={open}\r\n        onClose={() => setOpen(false)}\r\n        onConfirm={onConfirm}\r\n        loading={loading}\r\n      />\r\n      <DropdownMenu modal={false}>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\r\n            <span className=\"sr-only\">Open menu</span>\r\n            <MoreHorizontal className=\"h-4 w-4\" />\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"end\">\r\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n\r\n          <DropdownMenuItem\r\n            onClick={() => router.push(`/dashboard/user/${data.id}`)}\r\n          >\r\n            <Edit className=\"mr-2 h-4 w-4\" /> Update\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => setOpen(true)}>\r\n            <Trash className=\"mr-2 h-4 w-4\" /> Delete\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\employee-tables\\columns.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\employee-tables\\employee-table.tsx",[],["563","564"],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\user-tables\\cell-action.tsx",["565"],[],"\"use client\";\r\nimport { AlertModal } from \"@/components/modal/alert-modal\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { User } from \"@/constants/data\";\r\nimport { Edit, MoreHorizontal, Trash } from \"lucide-react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useState } from \"react\";\r\n\r\ninterface CellActionProps {\r\n  data: User;\r\n}\r\n\r\nexport const CellAction: React.FC<CellActionProps> = ({ data }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const router = useRouter();\r\n\r\n  const onConfirm = async () => {};\r\n\r\n  return (\r\n    <>\r\n      <AlertModal\r\n        isOpen={open}\r\n        onClose={() => setOpen(false)}\r\n        onConfirm={onConfirm}\r\n        loading={loading}\r\n      />\r\n      <DropdownMenu modal={false}>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\r\n            <span className=\"sr-only\">Open menu</span>\r\n            <MoreHorizontal className=\"h-4 w-4\" />\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"end\">\r\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\r\n\r\n          <DropdownMenuItem\r\n            onClick={() => router.push(`/dashboard/user/${data.id}`)}\r\n          >\r\n            <Edit className=\"mr-2 h-4 w-4\" /> Update\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => setOpen(true)}>\r\n            <Trash className=\"mr-2 h-4 w-4\" /> Delete\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\user-tables\\client.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\tables\\user-tables\\columns.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\accordion.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\alert-dialog.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\alert.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\avatar.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\badge.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\button.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\calendar.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\card.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\checkbox.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\data-table.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\dialog.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\dropdown-menu.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\form.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\heading.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\input.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\label.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\modal.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\popover.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\scroll-area.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\select.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\separator.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\sheet.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\skeleton.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\slider.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\switch.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\table.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\tabs.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\textarea.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\toast.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\toaster.tsx",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\components\\ui\\use-toast.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\auth-options.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\form-schema.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\store.ts",[],[],"C:\\Users\\moemi\\Desktop\\Project_groteberen\\next-shadcn-dashboard-starter-main\\lib\\utils.ts",[],[],{"ruleId":"566","severity":1,"message":"567","line":25,"column":9,"nodeType":"568","messageId":"569","endLine":25,"endColumn":18},{"ruleId":"570","severity":2,"message":"571","line":6,"column":26,"nodeType":"572","endLine":6,"endColumn":48},{"ruleId":"566","severity":1,"message":"573","line":69,"column":10,"nodeType":"568","messageId":"569","endLine":69,"endColumn":14},{"ruleId":"566","severity":1,"message":"574","line":73,"column":9,"nodeType":"568","messageId":"569","endLine":73,"endColumn":21},{"ruleId":"566","severity":1,"message":"575","line":118,"column":9,"nodeType":"568","messageId":"569","endLine":118,"endColumn":17},{"ruleId":"566","severity":1,"message":"576","line":131,"column":9,"nodeType":"568","messageId":"569","endLine":131,"endColumn":32},{"ruleId":"566","severity":1,"message":"577","line":13,"column":3,"nodeType":"568","messageId":"569","endLine":13,"endColumn":18},{"ruleId":"566","severity":1,"message":"578","line":28,"column":10,"nodeType":"568","messageId":"569","endLine":28,"endColumn":18},{"ruleId":"566","severity":1,"message":"573","line":72,"column":10,"nodeType":"568","messageId":"569","endLine":72,"endColumn":14},{"ruleId":"566","severity":1,"message":"579","line":74,"column":10,"nodeType":"568","messageId":"569","endLine":74,"endColumn":20},{"ruleId":"566","severity":1,"message":"580","line":74,"column":22,"nodeType":"568","messageId":"569","endLine":74,"endColumn":35},{"ruleId":"566","severity":1,"message":"574","line":77,"column":9,"nodeType":"568","messageId":"569","endLine":77,"endColumn":21},{"ruleId":"566","severity":1,"message":"575","line":122,"column":9,"nodeType":"568","messageId":"569","endLine":122,"endColumn":17},{"ruleId":"566","severity":1,"message":"576","line":135,"column":9,"nodeType":"568","messageId":"569","endLine":135,"endColumn":32},{"ruleId":"566","severity":1,"message":"581","line":29,"column":19,"nodeType":"568","messageId":"569","endLine":29,"endColumn":29},{"ruleId":"566","severity":1,"message":"573","line":46,"column":10,"nodeType":"568","messageId":"569","endLine":46,"endColumn":14},{"ruleId":"566","severity":1,"message":"579","line":48,"column":10,"nodeType":"568","messageId":"569","endLine":48,"endColumn":20},{"ruleId":"566","severity":1,"message":"580","line":48,"column":22,"nodeType":"568","messageId":"569","endLine":48,"endColumn":35},{"ruleId":"566","severity":1,"message":"574","line":53,"column":9,"nodeType":"568","messageId":"569","endLine":53,"endColumn":21},{"ruleId":"566","severity":1,"message":"582","line":54,"column":9,"nodeType":"568","messageId":"569","endLine":54,"endColumn":15},{"ruleId":"566","severity":1,"message":"583","line":58,"column":9,"nodeType":"568","messageId":"569","endLine":58,"endColumn":14},{"ruleId":"566","severity":1,"message":"584","line":89,"column":9,"nodeType":"568","messageId":"569","endLine":89,"endColumn":17},{"ruleId":"566","severity":1,"message":"575","line":106,"column":9,"nodeType":"568","messageId":"569","endLine":106,"endColumn":17},{"ruleId":"585","severity":1,"message":"586","line":120,"column":5,"nodeType":"587","messageId":"588","endLine":120,"endColumn":16},{"ruleId":"570","severity":2,"message":"589","line":4,"column":20,"nodeType":"572","endLine":4,"endColumn":34},{"ruleId":"570","severity":2,"message":"571","line":6,"column":26,"nodeType":"572","endLine":6,"endColumn":48},{"ruleId":"570","severity":2,"message":"590","line":1,"column":24,"nodeType":"572","endLine":1,"endColumn":42},{"ruleId":"570","severity":2,"message":"591","line":3,"column":8,"nodeType":"572","endLine":3,"endColumn":52},{"ruleId":"570","severity":2,"message":"589","line":5,"column":20,"nodeType":"572","endLine":5,"endColumn":34},{"ruleId":"566","severity":1,"message":"573","line":34,"column":10,"nodeType":"568","messageId":"569","endLine":34,"endColumn":14},{"ruleId":"566","severity":1,"message":"592","line":34,"column":16,"nodeType":"568","messageId":"569","endLine":34,"endColumn":25},{"ruleId":"566","severity":1,"message":"593","line":44,"column":7,"nodeType":"568","messageId":"569","endLine":44,"endColumn":27},{"ruleId":"570","severity":2,"message":"594","line":3,"column":26,"nodeType":"572","endLine":3,"endColumn":39},{"ruleId":"570","severity":2,"message":"595","line":3,"column":30,"nodeType":"572","endLine":3,"endColumn":46},{"ruleId":"566","severity":1,"message":"596","line":13,"column":10,"nodeType":"568","messageId":"569","endLine":13,"endColumn":19},{"ruleId":"566","severity":1,"message":"581","line":21,"column":19,"nodeType":"568","messageId":"569","endLine":21,"endColumn":29},{"ruleId":"597","severity":1,"message":"598","line":112,"column":6,"nodeType":"599","endLine":112,"endColumn":27,"suggestions":"600","suppressions":"601"},{"ruleId":"597","severity":1,"message":"598","line":187,"column":6,"nodeType":"599","endLine":187,"endColumn":19,"suggestions":"602","suppressions":"603"},{"ruleId":"566","severity":1,"message":"581","line":21,"column":19,"nodeType":"568","messageId":"569","endLine":21,"endColumn":29},"@typescript-eslint/no-unused-vars","'condition' is assigned a value but never used.","Identifier","unusedVar","import/no-unresolved","Unable to resolve path to module '@/hooks/useCountries'.","Literal","'open' is assigned a value but never used.","'toastMessage' is assigned a value but never used.","'onDelete' is assigned a value but never used.","'triggerImgUrlValidation' is assigned a value but never used.","'FormDescription' is defined but never used.","'Checkbox' is defined but never used.","'imgLoading' is assigned a value but never used.","'setImgLoading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'action' is assigned a value but never used.","'delta' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","Unable to resolve path to module 'react-select'.","Unable to resolve path to module 'react-datepicker'.","Unable to resolve path to module 'react-datepicker/dist/react-datepicker.css'.","'setIsOpen' is assigned a value but never used.","'initialTasks' is assigned a value but never used.","Unable to resolve path to module 'react-icons'.","Unable to resolve path to module 'react-spinners'.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'createQueryString', 'pathname', and 'router'. Either include them or remove the dependency array.","ArrayExpression",["604"],["605"],["606"],["607"],{"desc":"608","fix":"609"},{"kind":"610","justification":"611"},{"desc":"612","fix":"613"},{"kind":"610","justification":"611"},"Update the dependencies array to be: [createQueryString, pageIndex, pageSize, pathname, router]",{"range":"614","text":"615"},"directive","","Update the dependencies array to be: [createQueryString, pathname, router, searchValue]",{"range":"616","text":"617"},[2975,2996],"[createQueryString, pageIndex, pageSize, pathname, router]",[4954,4967],"[createQueryString, pathname, router, searchValue]"]